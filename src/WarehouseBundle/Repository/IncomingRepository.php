<?php

namespace WarehouseBundle\Repository;

use Doctrine\ORM\EntityRepository;
use WarehouseBundle\Entity\IncomingStatus;

/**
 * IncomingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomingRepository extends EntityRepository
{
	/**
	 * @param string|null $searchString
	 * @param null        $complete
	 * @param array       $criteria
	 * @param null        $orderBy
	 * @param null        $limit
	 * @param null        $offset
	 * @param bool        $queryOnly
	 *
	 * @return array|\Doctrine\ORM\Query
	 */
	public function searchContainers(string $searchString = null, $complete = null, $criteria = [],
	                                 $orderBy = null, $limit = null, $offset = null, $queryOnly = false)
	{
		$queryBuilder = $this->createQueryBuilder('i');
		if ($complete === true) {
			$queryBuilder->andWhere('i.status = :complete')
				->setParameter('complete', IncomingStatus::COMPLETED);
		} elseif ($complete === false) {
			$queryBuilder->andWhere('i.status <> :complete')
				->setParameter('complete', IncomingStatus::COMPLETED);
		}

		if ($searchString) {
			$queryBuilder->andWhere($queryBuilder->expr()->like('i.name', ':searchString'))
				->setParameter('searchString', '%' . $searchString . '%');
		}

		foreach ($criteria as $param => $value) {
			$queryBuilder->andWhere("{$param} = :value")->setParameter('value', $value);
		}

		if (!empty($orderBy)) {
			foreach ($orderBy as $param => $order) {
				$queryBuilder->addOrderBy($param, $order);
			}
		}

		if (!$limit) {
			$queryBuilder->setMaxResults('25');
		} else {
			$queryBuilder->setMaxResults($limit);
		}

		if ($offset) {
			$queryBuilder->setFirstResult($offset);
		}

		$query = $queryBuilder->getQuery();
		if ($queryOnly) {
			return $query;
		}
		return $query->getResult();
	}
}
