<?php

namespace WarehouseBundle\Repository;

use Doctrine\ORM\EntityRepository;
use WarehouseBundle\Entity\Incoming;
use WarehouseBundle\Entity\IncomingStatus;
use WarehouseBundle\Model\Incoming\IncomingSearchModel;

/**
 * IncomingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomingRepository extends EntityRepository
{
	/**
	 * @param IncomingSearchModel $incomingSearchModel
	 * @param bool                $returnQuery
	 *
	 * @return Incoming[]|\Doctrine\ORM\Query
	 */
	public function searchContainers(IncomingSearchModel $incomingSearchModel, $returnQuery = false)
	{
		$queryBuilder = $this->createQueryBuilder('i');
		if ($incomingSearchModel->getisComplete() === true) {
			$queryBuilder->andWhere('i.status = :complete')
				->setParameter('complete', IncomingStatus::COMPLETED);
		} elseif ($incomingSearchModel->getisComplete() === false) {
			$queryBuilder->andWhere('i.status != :complete')
				->setParameter('complete', IncomingStatus::COMPLETED);
		}

		if ($incomingSearchModel->getSearchString()) {
			$queryBuilder->andWhere($queryBuilder->expr()->like('i.name', ':searchString'))
				->setParameter('searchString', '%' . $incomingSearchModel->getSearchString() . '%');
		}

		foreach ($incomingSearchModel->getCriteria() as $param => $value) {
			$queryBuilder->andWhere("i.{$param} = '{$value}'");
		}

		foreach ($incomingSearchModel->getOrderBy() as $param => $order) {
			$queryBuilder->addOrderBy("i.{$param}", $order);
		}

		if ($incomingSearchModel->getEtaStartDate()) {
			$queryBuilder->andWhere("i.eta > :startDate")->setParameter('startDate', $incomingSearchModel->getEtaStartDate());
		}

		if ($incomingSearchModel->getEtaEndDate()) {
			$queryBuilder->andWhere("i.eta < :endDate")->setParameter('endDate', $incomingSearchModel->getEtaEndDate());
		}

		if (!$incomingSearchModel->getLimit()) {
			$queryBuilder->setMaxResults('25');
		} else {
			$queryBuilder->setMaxResults($incomingSearchModel->getLimit());
		}

		if ($incomingSearchModel->getOffset()) {
			$queryBuilder->setFirstResult($incomingSearchModel->getOffset());
		}

		$query = $queryBuilder->getQuery();
		if ($returnQuery) {
			return $query;
		}
		return $query->getResult();
	}
}
