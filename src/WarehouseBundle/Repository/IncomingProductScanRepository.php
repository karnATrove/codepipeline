<?php

namespace WarehouseBundle\Repository;

use Doctrine\ORM\EntityRepository;
use WarehouseBundle\Entity\Incoming;

/**
 * IncomingProductScanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomingProductScanRepository extends EntityRepository
{
	/**
	 * @param Incoming $incoming
	 * @param          $model
	 * @param null     $locked
	 *
	 * @return mixed
	 */
	public function findOneByModel(Incoming $incoming, $model, $locked = NULL)
	{
		$query = $this->createQueryBuilder('ps')
			->join('WarehouseBundle:Incoming', 'i', 'WITH', 'ps.incoming = i.id')
			->join('WarehouseBundle:Product', 'p', 'WITH', 'ps.product = p.id')
			->andWhere('ps.incoming = :incoming')
			->andWhere('p.model = :model')
			->setParameter('incoming', $incoming)
			->setParameter('model', $model)
			->setMaxResults(1);
		# If locked is true, return locked records
		if (!is_null($locked)) {
			if ($locked)
				$query->andWhere('ps.location IS NOT NULL');
			else
				$query->andWhere('ps.location IS NULL');
		}
		return $query->getQuery()->getOneOrNullResult();
	}

	/**
	 * @param Incoming $incoming
	 * @param          $model
	 *
	 * @return mixed|string
	 */
	public function findCountScannedByModel(Incoming $incoming, $model)
	{
		try {
			$result = $this->createQueryBuilder('ps')
				->select('SUM(ps.qtyOnScan) as total')
				->join('WarehouseBundle:Incoming', 'i', 'WITH', 'ps.incoming = i.id')
				->join('WarehouseBundle:Product', 'p', 'WITH', 'ps.product = p.id')
				->andWhere('ps.incoming = :incoming')
				->andWhere('p.model = :model')
				->setParameter('incoming', $incoming)
				->setParameter('model', $model)
				->groupBy('p.model')
				->setMaxResults(1)
				->getQuery()
				->getSingleScalarResult();
			return $result;
		} catch (\Exception $e) {
			return '0';
		}
	}
}
