<?php

namespace WarehouseBundle\Repository;

/**
 * IncomingProductScanRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IncomingProductScanRepository extends \Doctrine\ORM\EntityRepository
{
	/**
	 * { function_description }
	 *
	 * @param      \WarehouseBundle\Entity\Incoming  $incoming  The incoming
	 * @param      string                            $model     The model sku
	 * @param      boolean                           $locked    If the entry is locked from scan increments (create new if sku is scanned)
	 *
	 * @return     <type>                            ( description_of_the_return_value )
	 */
	function findOneByModel(\WarehouseBundle\Entity\Incoming $incoming, $model, $locked=NULL) {
		$query = $this->createQueryBuilder('ps')
			->join('WarehouseBundle:Incoming','i','WITH','ps.incoming = i.id')
			->join('WarehouseBundle:Product','p','WITH','ps.product = p.id')
			//->innerJoin('WarehouseBundle:IncomingProduct','ip','WITH','ps.incomingProduct = ip.id')
			->andWhere('ps.incoming = :incoming')
			->andWhere('p.model = :model')
            ->setParameter('incoming', $incoming)
            ->setParameter('model', $model)
            ->setMaxResults(1);
        # If locked is true, return locked records
        if (!is_null($locked)) {
        	if ($locked)
        		$query->andWhere('ps.location IS NOT NULL');
        	else
        		$query->andWhere('ps.location IS NULL');
        }
        return $query->getQuery()
            ->getOneOrNullResult();
	}

	/**
	 * Returns the count of a specific model that has been scanned.
	 *
	 * @param      \WarehouseBundle\Entity\Incoming  $incoming  The incoming
	 * @param      <type>                            $model     The model
	 *
	 * @return     <type>                            ( description_of_the_return_value )
	 */
	function findCountScannedByModel(\WarehouseBundle\Entity\Incoming $incoming, $model) {
		try {
			$result = $this->createQueryBuilder('ps')
				->select('SUM(ps.qtyOnScan) as total')
				->join('WarehouseBundle:Incoming','i','WITH','ps.incoming = i.id')
				->join('WarehouseBundle:Product','p','WITH','ps.product = p.id')
				//->innerJoin('WarehouseBundle:IncomingProduct','ip','WITH','ps.incomingProduct = ip.id')
				->andWhere('ps.incoming = :incoming')
				->andWhere('p.model = :model')
	            ->setParameter('incoming', $incoming)
	            ->setParameter('model', $model)
	            ->groupBy('p.model')
	            ->setMaxResults(1)
	            ->getQuery()
	            ->getSingleScalarResult();
	        return $result;
	    } catch(\Exception $e) {
	    	return '0';
	    }
	}
}
